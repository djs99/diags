# The following fields must be created for all error matches:
#      log_message, possible_cause, name, comments, uuid
# No additional fields are supported by the plugin.

input {
  file {
    path => ["/var/log/cinder/cinder-volume.log"]
    tags => ["cinder"]
    type => "cinder"
  }
  file { #devstack
    path => ["/opt/stack/logs/c-vol.log"]
    tags => ["cinder"]
    type => "cinder"
  }
  file {
    path => ["/var/log/nova/nova-compute.log"]
    tags => ["nova"]
    type => "nova"
  }
  file { #devstack
    path => ["/opt/stack/logs/n-cpu.log"]
    tags => ["nova"]
    type => "nova"
  }
}

filter {
    grok {
    match => {"message"=> [
      "(?<log_message>Error encountered during initialization of driver)",
      "(?<log_message>Error communicating with the 3PAR WS)",
      "(?<log_message>Forbidden \(HTTP 403\) 5 - invalid username or password)",
      "(?<log_message>Invalid input received: CPG)",
      "(?<log_message>You must install hp3parclient before using 3PAR drivers)",
      "(?<log_message>systool is not installed)",
      "(?<log_message>Executable not found: sginfo)",
      "(?<log_message>Invalid input received: At least one valid iSCSI IP address must be set)",
      "(?<log_message>Found invalid iSCSI IP address)"
    ]}
  }

  #  Cinder errors
  if [type] == "cinder"{
    if "initialization of driver" in [log_message] {
          mutate {
            add_field => {
              "possible_cause" => "Driver may not have initialized on Cinder volume"
              "name" => "initialization"
              "comments" => "none"  # optional field for additional information
            }
          }
    }
    else if "Error communicating with the 3PAR WS" in [log_message]  {
          mutate {
            add_field => {
              "possible_cause" => "Incorrect WS URL in the cinder.conf file"
              "name" => "WS"
              "comments" => "none"  # optional field for additional information
            }
          }
    }
    else if "username or password" in [log_message]  {
          mutate {
            add_field => {
              "possible_cause" => "Incorrect 3par credentials in the cinder.conf file"
              "name" => "credentials"
              "comments" => "none"  # optional field for additional information
            }
          }
    }
    else if "Invalid input received: CPG" in [log_message]  {
          mutate {
            add_field => {
              "possible_cause" => "The CPG specified in the cinder.conf file does not exist"
              "name" => "CPG"
              "comments" => "none"  # optional field for additional information
            }
          }
    }

    else if "iSCSI IP address" in [log_message]  {
          mutate {
            add_field => {
              "possible_cause" => "Incorrect iSCSI IP address in the cinder.conf file"
              "name" => "iSCSI"
              "comments" => "none"  # optional field for additional information
            }
            replace=> {"log_message" => "iSCSI IP address"}
          }
    }

    else if "hp3parclient" in [log_message]  {
          mutate {
            add_field => {
              "possible_cause" => "hp3parclient may not be installed on the cinder node."
              "name" => "3par"
              "comments" => "none"  # optional field for additional information
            }
          }
    }

    else { drop { } }

  #  Nova errors
  }else if [type] == "nova"{
    if "systool is not installed" in [message] {
      mutate{
        add_field => {
          "possible_cause" => "sysfsutils may not be installed on the nova node"
          "name" => "sysfsutils"
          "comments" => "none" # optional field for additional information
          }
        }
    }
    else if "Executable not found: sginfo" in [message] {
      mutate{
        add_field => {
          "possible_cause" => "sg3-utils may not be installed on the nova node"
          "name" => "sg3-utils"
          "comments" => "none" # optional field for additional information
          }
        }
    }
    else { drop { } }
  }

  uuid {
    target => "@uuid"
  }


}

output {
  stdout { codec => rubydebug }

  file {
    path => "/var/log/cinder-diagnostics/errorlog1.txt"
    codec => json_lines
  }

  file {
    path => "/var/log/cinder-diagnostics/errorlog2.txt"
    codec => json_lines
  }

}
